#include <Servo.h>           // 서보 구동에 필요한 라이브러리

/*----------------------------------------------------------------------
  로봇제어 프로그램 (ROBOT CONTROL 5 UNO)
  ------------------------------------ ------------------------------------
   우노 --> 서보모터(6개) 2,3,4,5,6,7
            블루투스      12,13  (RX,TX)
                                        메가 --> 아날로그(볼륨)  A2,A3,A4,A5,A6,A7
                                                 서보모터      2,4,6,8,10,12 (PWM핀)
                                                 블루투스      19,18  (RX1,TX1)  Serial1
  ----------------------------------------------------------------------------*/

int AXIS(char prev_axis);
int filter3(int old_val, int new_val);
void sweep(int servo_num, int angle, int delaySWP);
void VR_Control();
void vr_center();
void VR_Control_loop();

void Hello();
void TEST01();
void position_0();
void position_45();
void position_90();
void position_135();
void position_180();
void loading();


Servo myservo[6];  // 서보 모터 6개를 할당
int now_angle[6];
//int axis_order[6][10];
int app_axis_order[6][2];
//int mem_axis_order[6][10];
int app_axis_val[6][10];                   // 슬라이더 이동시 중간데이터 저장
int v = 0, vmax = 10;                      // 중간데이터 증분변수, 데이터 개수

char prev_axis = 'Z';
int delayT = 20;  //3,5,8,11,15ms
int delay180 = 300;
int potpin[6];
int led[6];
int mSvalue[6], mFvalue[6];
int vr_cen[6];
float sensitivity = 0.5;       // 0.4     //0.33;         // 새센서값을 줄이고 전센서값을 늘리는 보정 팩터
unsigned long time0, time1,time2;
int mode=1;           //0 ; 직접회전    1; 연속데이터 회전

int angle = 90;
int deadZone = 10;  // 디드존 설정 (10도 이내 변화는 무시)
int trigPin1 = 9;
int echoPin1 = 8;
int trigPin2 = 11;
int echoPin2 = 10;
float duration1;
float distance1;
float duration2;
float distance2;

char c;
//int serpin[]={2,3,4,5,6,7};    //mega
//int serpin0[] = { 3, 5, 6, 9, 10, 11 };  //uno  전원투입후 처음 동작순서  (3번핀에 2번모터연결됨)
//int serpin1[] = { 5, 3, 6, 9, 10, 11 };  //uno  통상적 움직임
//unsigned long start_time, end_time;  // 시간 제어를 위한 변수
//int delay_dt;

void setup() {
  int i;

  Serial.begin(9600);     //(115200);              //  BTSerial.begin(115200);
  //  Serial.setTimeout(10);  //  BTSerial.setTimeout(1);
  Serial.println("Hello, START ");

  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  delay(100);

  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  delay(100);


  for (i = 0; i < 6; i++) {
    myservo[i].attach(i+2);
    delay(delay180);
  }
  /*myservo[0].attach(2);
    delay(delay180);
    myservo[1].attach(4);
    delay(delay180);
    myservo[2].attach(6);
    delay(delay180);
    myservo[3].attach(8);
    delay(delay180);
    myservo[4].attach(10);
    delay(delay180);
    myservo[5].attach(12);
    delay(delay180);
  */
  for (i = 0; i < 5; i++) {
    myservo[i].write(90);
    //sweep(0, 90, delayT);
    delay(delay180);
    now_angle[i] = myservo[i].read();
  }
  myservo[5].write(45);
  //sweep(5, 90, delayT);
  delay(delay180);
  now_angle[5] = myservo[5].read();

  /*  myservo[0].write(90);
    //sweep(0, 90, delayT);
    delay(delay180);
    now_angle[0] = myservo[0].read();

    myservo[1].write(90);
    //sweep(1, 90, delayT);
    delay(delay180);
    now_angle[1] = myservo[1].read();

    myservo[2].write(90);
    //sweep(2, 90, delayT);
    delay(delay180);
    now_angle[2] = myservo[2].read();

    myservo[3].write(90);
    //sweep(3, 90, delayT);
    delay(delay180);
    now_angle[3] = myservo[3].read();

    myservo[4].write(90);
    //sweep(4, 90, delayT);
    delay(delay180);
    now_angle[4] = myservo[4].read();

    myservo[5].write(90);
    //sweep(5, 90, delayT);
    delay(delay180);
    now_angle[5] = myservo[5].read();
  */
  //delay(10000);

  for (int i = 0; i < 6; i++)
    app_axis_order[i][0] = 90;

  /*  Serial.begin(9600);     //(115200);              //  BTSerial.begin(115200);
    Serial.setTimeout(10);  //  BTSerial.setTimeout(1);
    Serial.println("Hello, PC world!");
  */
  while (!Serial) {
    ;                   // wait for serial port to connect. Needed for native USB port only
  }
  //  Serial1.begin(9600);        //메가의 경우 블루투스 통신용
  //  Serial1.setTimeout(10);     //  BTSerial.setTimeout(1);

  Serial1.begin(9600);
  Serial1.println("Hello, PHONE world?");
  time0 = millis();
}

void loop() {
  //  int filtervalue=0;
  /*  if (BTSerial.available()) {
      String data = BTSerial.readString();
      command(data);
    } */
            // 첫 번째 센서 측정
            measureDistance1();
            
            // 두 번째 센서 측정
            measureDistance2();
          
            Serial.print("Distance 1: ");
            Serial.print(distance1);
            Serial.println(" cm");
            
            Serial.print("Distance 2: ");
            Serial.print(distance2);
            Serial.println(" cm");

  if (Serial1.available()) {
    int i, filter_val;
    c = Serial1.read();
    int val = Serial1.parseInt();

    time1 = millis();
    Serial.print("\n");
    Serial.print(c);
    Serial.print("  ");
    Serial.print(val);
    Serial.print("  ");
    Serial.print(time0);
    Serial.print("  ");
    Serial.print(time1);
    Serial.print("  ");
    Serial.print(time1 - time0);
    Serial.print("  ");
    time0 = time1;

    switch (c) {
      case 'A':
        {
//          Serial.print(" Im in switch A ");
        if(mode==0){
            sweep(0,val,delayT);
        }else{
          
          if ((prev_axis != 'A') && (prev_axis != 'Z'))           // 1번 축
          //if (prev_axis != 'A')             // 1번 축
          {
            Serial.print("\n");
            Serial.print(" Im in IF A, 축 ");
            Serial.print(AXIS(prev_axis));
            Serial.print(" v ");
            Serial.print(v);
            Serial.print("  ");
            Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);

            sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);

            //sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);
//            Serial.print(AXIS(prev_axis));
//            Serial.print("  ");
//            Serial.print(app_axis_order[AXIS(prev_axis)][0]);

            for (i = 0; i < vmax; i++)
              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;

          }
//          app_axis_order[0][1] = app_axis_order[0][0];      //전 센서값
//          app_axis_order[0][0] = val;                       //새 센서값
//          filter_val = filter3(app_axis_order[0][1], app_axis_order[0][0]);

//          sweep(0, filter_val, delayT);
          //        sweep(0, val, delayT);

          app_axis_val[0][v] = val;      // 0번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
          v++;
          Serial.print(" v ");
          Serial.print(v);
          time1=millis();

          if (v == vmax) {                                   //10개 데이터씩 끊어서 마지막 데이터로 회전시킴
            Serial.print("0번축 vmax  ");
            Serial.println(app_axis_val[0][vmax - 1]);

            sweep(0, app_axis_val[0][vmax - 1], delayT);         //10개가 안된상태로 다른축으로 넘어가면 다음 축에서 처리
            for (i = 0; i < vmax; i++)
//              app_axis_val[AXIS(prev_axis)][i] = 0;
              app_axis_val[0][i] = 0;
            v = 0;
//                timeA = millis();
          }

          prev_axis = 'A';
//          Serial.print("\n");
//          Serial.print(app_axis_order[0][1]);
//          Serial.print(" ");
//          Serial.print(app_axis_order[0][0]);
//          Serial.print(" ");
//          Serial.print(filter_val);
//          Serial.print(" ");
//          Serial.print(prev_axis);
//          Serial.print(" ");

        }
          break;
        }

      case 'B':
      {
        if(mode==0){
            sweep(1,val,delayT);
        }else{

//          Serial.print("\n");
//          Serial.print(prev_axis);
        if ((prev_axis != 'B') && (prev_axis != 'Z'))           // 1번 축
        //if (prev_axis != 'B')
        {
          Serial.print("\n");
          Serial.print(" Im in IF B 축 ");
          Serial.print(AXIS(prev_axis));
          Serial.print(" v ");
          Serial.print(v);
          Serial.print("  ");
          Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);
          //sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);

          sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);
          for (i = 0; i < vmax; i++)
            app_axis_val[AXIS(prev_axis)][i] = 0;
          v = 0;

//          Serial.print(AXIS(prev_axis));
//          Serial.print("  ");
//          Serial.print(app_axis_order[AXIS(prev_axis)][0]);
        }
        
//        app_axis_order[1][1] = app_axis_order[1][0];      //전 센서값
//        app_axis_order[1][0] = val;                       //새 센서값
//        filter_val = filter3(app_axis_order[1][1], app_axis_order[1][0]);
//
//        sweep(1, filter_val, delayT);
        //        sweep(1, val, delayT);

        app_axis_val[1][v] = val;      // 1번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
        v++;
        if (v == vmax) {
          Serial.print(" v ");
          Serial.print(v);
          Serial.print("1번축 vmax  ");
          Serial.println(app_axis_val[1][vmax - 1]);

          sweep(1, app_axis_val[1][vmax - 1], delayT);
          for (i = 0; i < vmax; i++)
            app_axis_val[1][i] = 0;
          v = 0;
        }

        prev_axis = 'B';
//        Serial.print("\n");
//        Serial.print(app_axis_order[1][1]);
//        Serial.print(" ");
//        Serial.print(app_axis_order[1][0]);
//        Serial.print(" ");
//        Serial.print(filter_val);
//        Serial.print(" ");
//        Serial.print(prev_axis);
//        Serial.print(" ");
        }
        break;
        }
        
      case 'C':
      {
        if(mode==0){
            sweep(2,val,delayT);
        }else{
      
          if ((prev_axis != 'C') && (prev_axis != 'Z'))           // 1번 축
//        if (prev_axis != 'C')
        {
          Serial.print("\n");
          Serial.print(" Im in IF C ");
            Serial.print(AXIS(prev_axis));
            Serial.print(" v ");
            Serial.print(v);
            Serial.print("  ");
            Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);

            sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);

//          sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);

//          Serial.print(AXIS(prev_axis));
//          Serial.print("  ");
//          Serial.print(app_axis_order[AXIS(prev_axis)][0]);

            for (i = 0; i < vmax; i++)
              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
        }
//        app_axis_order[2][1] = app_axis_order[2][0];      //전 센서값
//        app_axis_order[2][0] = val;                       //새 센서값
//        filter_val = filter3(app_axis_order[2][1], app_axis_order[2][0]);
//
//        sweep(2, filter_val, delayT);

        //        sweep(2, val, delayT);

          app_axis_val[2][v] = val;      // 0번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
          v++;
          Serial.print(" v ");
          Serial.print(v);

          if (v == vmax) {                                   //10개 데이터씩 끊어서 마지막 데이터로 회전시킴
            Serial.print("2번축 vmax  ");
            Serial.println(app_axis_val[2][vmax - 1]);

            sweep(2, app_axis_val[2][vmax - 1], delayT);         //10개가 안된상태로 다른축으로 넘어가면 다음 축에서 처리
            for (i = 0; i < vmax; i++)
//              app_axis_val[AXIS(prev_axis)][i] = 0;
              app_axis_val[2][i] = 0;
            v = 0;
//    timeA = millis();
            
          }
        
        prev_axis = 'C';
//        Serial.print("\n");
//        Serial.print(app_axis_order[2][1]);
//        Serial.print(" ");
//        Serial.print(app_axis_order[2][0]);
//        Serial.print(" ");
//        Serial.print(filter_val);
//        Serial.print(" ");
//        Serial.print(prev_axis);
//        Serial.print(" ");
        }
        break;
      }
      
      case 'D':
      {
        if(mode==0){
            sweep(3,val,delayT);
        }else{

        if ((prev_axis != 'D') && (prev_axis != 'Z'))           // 1번 축
//        if (prev_axis != 'D')
        {
          Serial.print("\n");
          Serial.print(" Im in IF D ");
            Serial.print(AXIS(prev_axis));
            Serial.print(" v ");
            Serial.print(v);
            Serial.print("  ");
            Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);

            sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);
    //      sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);

          Serial.print(AXIS(prev_axis));
          Serial.print("  ");
          Serial.print(app_axis_order[AXIS(prev_axis)][0]);

            for (i = 0; i < vmax; i++)
              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
          
        }
//        app_axis_order[3][1] = app_axis_order[3][0];      //전 센서값
//        app_axis_order[3][0] = val;                       //새 센서값
//        filter_val = filter3(app_axis_order[3][1], app_axis_order[3][0]);
//
//        sweep(3, filter_val, delayT);

        //        sweep(3, val, delayT);

          app_axis_val[3][v] = val;      // 0번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
          v++;
          Serial.print(" v ");
          Serial.print(v);

          if (v == vmax) {                                   //10개 데이터씩 끊어서 마지막 데이터로 회전시킴
            Serial.print("3번축 vmax  ");
            Serial.println(app_axis_val[3][vmax - 1]);

            sweep(3, app_axis_val[3][vmax - 1], delayT);         //10개가 안된상태로 다른축으로 넘어가면 다음 축에서 처리
            for (i = 0; i < vmax; i++)
              app_axis_val[3][i] = 0;
//              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
//    timeA = millis();
            
          }

        prev_axis = 'D';
//        Serial.print("\n");
//        Serial.print(app_axis_order[3][1]);
//        Serial.print(" ");
//        Serial.print(app_axis_order[3][0]);
//        Serial.print(" ");
//        Serial.print(filter_val);
//        Serial.print(" ");
//        Serial.print(prev_axis);
//        Serial.print(" ");
        }
        break;
      }
      
      case 'E':
      {
        if(mode==0){
            sweep(4,val,delayT);
        }else{
      
        if ((prev_axis != 'E') && (prev_axis != 'Z'))           // 1번 축
//        if (prev_axis != 'E')
        {
          Serial.print("\n");
          Serial.print(" Im in IF E ");
            Serial.print(AXIS(prev_axis));
            Serial.print(" v ");
            Serial.print(v);
            Serial.print("  ");
            Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);

            sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);
       //   sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);

//          Serial.print(AXIS(prev_axis));
//          Serial.print("  ");
//          Serial.print(app_axis_order[AXIS(prev_axis)][0]);

            for (i = 0; i < vmax; i++)
              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
        }
//        app_axis_order[4][1] = app_axis_order[4][0];      //전 센서값
//        app_axis_order[4][0] = val;                       //새 센서값
//        filter_val = filter3(app_axis_order[4][1], app_axis_order[4][0]);
//
//        sweep(4, filter_val, delayT);

        //        sweep(4, val, delayT);
          app_axis_val[4][v] = val;      // 0번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
          v++;
          Serial.print(" v ");
          Serial.print(v);

          if (v == vmax) {                                   //10개 데이터씩 끊어서 마지막 데이터로 회전시킴
            Serial.print("4번축 vmax  ");
            Serial.println(app_axis_val[4][vmax - 1]);

            sweep(4, app_axis_val[4][vmax - 1], delayT);         //10개가 안된상태로 다른축으로 넘어가면 다음 축에서 처리
            for (i = 0; i < vmax; i++)
              app_axis_val[4][i] = 0;
//              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
//    timeA = millis();
            
          }
       
        prev_axis = 'E';
//        Serial.print("\n");
//        Serial.print(app_axis_order[4][1]);
//        Serial.print(" ");
//        Serial.print(app_axis_order[4][0]);
//        Serial.print(" ");
//        Serial.print(filter_val);
//        Serial.print(" ");
//        Serial.print(prev_axis);
//        Serial.print(" ");
        }
        break;
      }
      
      case 'F':
      {
        if(mode==0){
            sweep(5,val,delayT);
        }else{

        if ((prev_axis != 'F') && (prev_axis != 'Z'))           // 1번 축
//        if (prev_axis != 'F')
        {
          Serial.print("\n");
          Serial.print(" Im in IF F ");
            Serial.print(AXIS(prev_axis));
            Serial.print(" v ");
            Serial.print(v);
            Serial.print("  ");
            Serial.println(app_axis_val[AXIS(prev_axis)][v - 1]);

            sweep(AXIS(prev_axis), app_axis_val[AXIS(prev_axis)][v - 1], delayT);
        //  sweep(AXIS(prev_axis), app_axis_order[AXIS(prev_axis)][0] , delayT);

          Serial.print(AXIS(prev_axis));
          Serial.print("  ");
          Serial.print(app_axis_order[AXIS(prev_axis)][0]);
            for (i = 0; i < vmax; i++)
              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
         
        }
//        app_axis_order[5][1] = app_axis_order[5][0];      //전 센서값
//        app_axis_order[5][0] = val;                       //새 센서값
//        filter_val = filter3(app_axis_order[5][1], app_axis_order[5][0]);
//
//        sweep(5, filter_val, delayT);

        //        sweep(5, val, delayT);

          app_axis_val[5][v] = val;      // 0번축 0번째 변화값, 앱에서 들어온 값 , 순서대로
          v++;
          Serial.print(" v ");
          Serial.print(v);

          if (v == vmax) {                                   //10개 데이터씩 끊어서 마지막 데이터로 회전시킴
            Serial.print("5번축 vmax  ");
            Serial.println(app_axis_val[5][vmax - 1]);

            sweep(5, app_axis_val[5][vmax - 1], delayT);         //10개가 안된상태로 다른축으로 넘어가면 다음 축에서 처리
            for (i = 0; i < vmax; i++)
              app_axis_val[5][i] = 0;
//              app_axis_val[AXIS(prev_axis)][i] = 0;
            v = 0;
//    timeA = millis();
          }
       
        prev_axis = 'E';
//        Serial.print("\n");
//        Serial.print(app_axis_order[5][1]);
//        Serial.print(" ");
//        Serial.print(app_axis_order[5][0]);
//        Serial.print(" ");
//        Serial.print(filter_val);
//        Serial.print(" ");
//        Serial.print(prev_axis);
//        Serial.print(" ");
        }
        break;
      }
      
      case 'G':
        position_90();
        break;

      case 'H':        //slider_control
        mode=1;
        position_90();
        break;

      case 'M':            //VR_Control
        mode=1;
        position_90();
        //VR_Control();
        break;

      case 'N':     // 각도입력 모드
        position_90();
        mode=0;
        break;

      case 'S':
        mode=0;
        right_down();        
        delay(50);
                    //Sequins1();
        break;

      case 'T':
        mode=0;
          while(1){
           

            measureDistance1();
            measureDistance2();

           if (distance1 <= 10 && distance2 <= 10) {
                delay(500);
                right_down();
            }
            else{
              position_90();
            }
            delay(5000);
          }
        break;

      case 'V':
        mode=0;
        Hello();
        break;

      case 'X':
        position_90();
        mode=1;
        break;


      default:
        break;
    }
    /*    Serial.print(c);
        Serial.print("  ");
        Serial.print(val);
        Serial.print("  ");*/
  }

  //    Serial.write(mySerial.read());  }
  /*
     if (Serial.available()) {
     mySerial.write(Serial.read());
     }
  */
}

void measureDistance1() {  // 초음파 감지 함수
  digitalWrite(trigPin1, HIGH);  // 초음파출력
  delay(100);
  digitalWrite(trigPin1, LOW);
  
  long duration1 = pulseIn(echoPin1, HIGH);  // 30ms 
  distance1 = (duration1 == 0) ? 0 : duration1 * 0.0343 / 2;  // 거리 계산
  // distance = duration * 0.0343/2;
}

void measureDistance2() {  // 초음파 감지 함수
  digitalWrite(trigPin2, HIGH);  // 초음파출력
  delay(100);
  digitalWrite(trigPin2, LOW);
  
  long duration2 = pulseIn(echoPin2, HIGH);  // 30ms 
  distance2 = (duration2 == 0) ? 0 : duration2 * 0.0343 / 2;  // 거리 계산
  // distance = duration * 0.0343/2;
}




void right_down() {
  delay(500);
  moveServoToTarget(0, 5);  // 1번 서보: 90도에서 0도로 이동
  delay(1000); 

  moveServoToTarget(1, 65);  // 2번 서보: 90도에서 65도로 이동
  delay(1000);

  moveServoToTarget(2, 175);  // 3번 서보: 90도에서 175도로 이동
  delay(1000);

  moveServoToTarget(2, 175);  // 3번 서보: 90도에서 175도로 이동
  delay(1000);

  moveServoToTarget(5, 10);   // 5번 서보: 90도에서 15도로 이동
  delay(1000);

  moveServoToTarget(2, 135);   // 3번 서보: 175도에서 90도로 복귀
  delay(1000);

  moveServoToTarget(1, 90);   // 2번 서보: 65도에서 90도로 복귀
  delay(1000);

  moveServoToTarget(0, 175);   // 1번 서보: 0도에서 90도로 복귀
  delay(1000);

  moveServoToTarget(1, 65);   // 2번 서보: 다시 65도로 이동
  delay(1000);

  moveServoToTarget(2, 170);  // 3번 서보: 다시 175도로 이동
  delay(1000);

  moveServoToTarget(5, 90);   // 6번 서보: 다시 90도로 복귀
  delay(1000);

  moveServoToTarget(2, 90);  // 3번 서보: 다시 175도로 이동
  delay(1000);

  moveServoToTarget(0,90);
  delay(1000);

  moveServoToTarget(1,90);
  delay(1000);

  moveServoToTarget(3,90);
  delay(1000);



  delay(50);
}


// 서보 모터를 부드럽게 목표 위치로 이동시키는 함수 (디드존 적용)
void moveServoToTarget(int servoIndex, int targetPosition) {
  int currentPosition = myservo[servoIndex].read();  // 현재 각도 읽기

  // 현재 위치와 목표 위치 차이가 deadZone보다 클 때만 이동
  if (abs(currentPosition - targetPosition) > deadZone) {
    if (currentPosition < targetPosition) {
      for (int pos = currentPosition; pos <= targetPosition; pos++) {
        myservo[servoIndex].write(pos);
        delay(10);  // 서보 모터가 천천히 움직이도록 딜레이 추가
      }
    } else {
      for (int pos = currentPosition; pos >= targetPosition; pos--) {
        myservo[servoIndex].write(pos);
        delay(10);  // 서보 모터가 천천히 움직이도록 딜레이 추가
      }
    }
  }
}


void VR_Control() {
  Serial.println("Hello, VR_Control  ");

  for (int i = 0; i < 6; i++) {
    potpin[i] = 2 + i;
    led[i] = 22 + 2 * i;
    pinMode(led[i], OUTPUT);
    mSvalue[i] = 90;
    now_angle[i] = mSvalue[i];
    mFvalue[i] = mSvalue[i];
    vr_cen[i] = 0;
  }
  vr_center();
  Serial.println("  ");
  Serial.print("..vr center OK..");
  myservo[0].attach(2);
  delay(delay180);
  myservo[1].attach(4);
  delay(delay180);
  myservo[2].attach(6);
  delay(delay180);
  myservo[3].attach(8);
  delay(delay180);
  myservo[4].attach(10);
  delay(delay180);
  myservo[5].attach(12);
  delay(delay180);

  Serial.print("all attached");

  //  while (!Serial.available()) {}
  //  int a = Serial.read();  // 시리얼 입력이 다음으로 넘어가는 것을 방지하기 위한 코드

  for (int i = 0; i < 6; i++) {
    Serial.print(" I'm initial move ");
    Serial.print(mSvalue[i]);

    myservo[i].write(mSvalue[i]);
    //    sweep(i, Svalue[i], delayT);
    delay(delay180);
    now_angle[i] = myservo[i].read();
  }
  VR_Control_loop();
  return;
}

void vr_center() {
  int val;
  Serial.println("vr_center  ");

  while (!vr_cen[0] || !vr_cen[1] || !vr_cen[2] || !vr_cen[3] || !vr_cen[4] || !vr_cen[5]) {
    Serial.println("while  ");
    for (int i = 0; i < 6; i++) {
      val = analogRead(potpin[i]);  // reads the value of the potentiometer (value between 0 and 1023)

      if (i == 5)
        mSvalue[i] = map(val, 0, 1023, 0, 90);  // scale it for use with the servo (value between 0 and 180)
      else
        mSvalue[i] = map(val, 0, 1023, 0, 180);  // scale it for use with the servo (value between 0 and 180)

      mFvalue[i] = mSvalue[i];

      Serial.print(mSvalue[i]);
      Serial.print("  ");

      if (i == 5)
        if (mSvalue[i] > 43 && mSvalue[i] < 47) {
          digitalWrite(led[i], HIGH);
          vr_cen[i] = 1;
        } else {
          digitalWrite(led[i], LOW);
          vr_cen[i] = 0;
        }
      else if (mSvalue[i] > 87 && mSvalue[i] < 93) {
        digitalWrite(led[i], HIGH);
        vr_cen[i] = 1;
      } else {
        digitalWrite(led[i], LOW);
        vr_cen[i] = 0;
      }
    }
    delay(10);
  }
}

void VR_Control_loop() {
  while (1) {
    //  int mFvalue, mSvalue, ;
    int val;  //val1, val1m;
    Serial.print(" im LOOP ");

    for (int i = 0; i < 6; i++) {
      val = analogRead(potpin[i]);
      delay(5);
      if (i == 0) Serial.print("\n");
      Serial.print(i);
      Serial.print(", ");
      Serial.print(mSvalue[i]);
      Serial.print(", ");
      Serial.print(mFvalue[i]);
      Serial.print(", ");

      //mSValue = map(SValue[i], 0, 1023, 0, 90);
      if (i == 5)
        mSvalue[i] = map(val, 0, 1023, 0, 90);
      else
        mSvalue[i] = map(val, 0, 1023, 0, 180);

      mFvalue[i] = filter3(mFvalue[i], mSvalue[i]);
      //      FValue[i] = FValue[i] * (1 - sensitivity) + SValue[i] * sensitivity;
      //mFvalue = map(Fvalue[i], 0, 1023, 0, 180);
      /*    if (i == 5)
        mFvalue = map(Fvalue[i], 0, 1023, 0, 90);
        else
        mFvalue = map(Fvalue[i], 0, 1023, 0, 180);
      */
      /*  Serial.print(vrTime1);
                  Serial.print("  ");
                  Serial.print(vrTime2 - vrTime1);
                  Serial.print("  ");
      */
      /*  Serial.print(sensorValue);
                  Serial.print(", ");
                  Serial.print(filterValue);
                  Serial.print(", ");
                  Serial.print(mSValue);
                  Serial.print(", ");
                  Serial.print(mFValue);
              //  Serial.print(angle1);
                  Serial.print("\n");
                  vrTime1 = vrTime2;*/

      Serial.print(mFvalue[i]);
      Serial.print(", ");

      if (mFvalue[i] != now_angle[i]) {
        sweep(i, mFvalue[i], delayT);
        delay(delay180);
        //angle1 = mFValue;
      }
    }
    if (mFvalue[0] == now_angle[0] && mFvalue[1] == now_angle[1] && mFvalue[2] == now_angle[2] && mFvalue[3] == now_angle[3] && mFvalue[4] == now_angle[4] && mFvalue[5] == now_angle[5] )
    {
      if (Serial1.available()) {
        char c = Serial1.read();
        int val = Serial1.parseInt();

        Serial.print("\n");
        Serial.print(c);
        Serial.print("  ");
        Serial.print(val);
        Serial.print("  ");
        if (c == 'X') return;
      }
    }
  }
}

int AXIS(char prev_axis)
{
  switch (prev_axis) {
    case 'A':
      return 0;
    case 'B':
      return 1;
    case 'C':
      return 2;
    case 'D':
      return 3;
    case 'E':
      return 4;
    case 'F':
      return 5;
    default:
      break;
  }
}

int filter3(int old_val, int new_val)
{
  float fvalue;
  fvalue = old_val * (1 - sensitivity) + new_val * sensitivity;
  //  mValue = map(filterValue, 0, 1023, 0,180);
  delay(10);
  return int(fvalue);
}


void sweep(int servo_num, int angle, int delaySWP) {
  int pos;
  Serial.print("\n");
  Serial.print(" Im in sweep ");
  Serial.print(servo_num);
  Serial.print("  ");
  Serial.print(angle);

  //  now_angle[servo_num] = myservo[servo_num].read();
  /*  Serial.print(now_angle[servo_num]);
      Serial.print("   ");
      Serial.println(angle);     */
  if (now_angle[servo_num] < angle)
    for (pos = now_angle[servo_num]; pos <= angle; pos += 1) {
      myservo[servo_num].write(pos);
      delay(delaySWP);  //3,5,10,15
      now_angle[servo_num] = myservo[servo_num].read();
      /*Serial.println("++ pos");
        Serial.println(now_angle[servo_num]);     */
    }
  else if (now_angle[servo_num] > angle)
    for (pos = now_angle[servo_num]; pos >= angle; pos -= 1) {
      myservo[servo_num].write(pos);
      delay(delaySWP);
      now_angle[servo_num] = myservo[servo_num].read();
      /*Serial.println("-- pos");
        Serial.println(now_angle[servo_num]);        */
    }
  //        Serial.println(now_angle[servo_num]);
  /*  switch (servo_num) {
      case 0:
        prev_axis='A';
        break;
      case 1:
        prev_axis='B';
        break;
      case 2:
        prev_axis='C';
        break;
      case 3:
        prev_axis='D';
        break;
      case 4:
        prev_axis='E';
        break;
      case 5:
        prev_axis='F';
        break;
      default:
        break;
    }
  */
}

void Hello() {
  sweep(0, 90, delayT);
  sweep(1, 60, delayT);
  delay(delay180);
  for (int i = 3; i > 0; i--) {
    sweep(2, 135, delayT);
    delay(delay180);
    sweep(2, 90, delayT);
    delay(delay180);
  }
  position_90();
}

void TEST01() {
  int ang[] = { 5, 45, 90, 135, 175 };
  int ang5[] = { 5, 45, 80, 45, 0 };

  for (int i = 0; i < 5; i++) {      // 배열의 각도 개수
    for (int j = 0; j < 6; j++) {     // 6축
      if (j == 5) {
        sweep(5, ang5[i], delayT);
        delay(delay180);
        continue;
      }
      sweep(j, ang[i], delayT);
      delay(delay180);
    }
  }
  delay(delay180);
  //  delay(1000);
  position_90();

  /*  for (int i = 0; i < 5; i++) {
    sweep(0, ang[i], 15);
    delay(360);
    sweep(1, ang[i], 15);
    delay(360);
    sweep(2, ang[i], 15);
    delay(360);
    sweep(3, ang[i], 15);
    delay(360);
    sweep(4, ang[i], 15);
    delay(360);
    sweep(5, ang[i], 15);
    delay(360);
    delay(1000);
    }
  */
  //  servo[5].write(45);

  /*  myservo0.write(0);
    myservo1.write(10);
    myservo2.write(0);
    myservo3.write(0);
    myservo4.write(0);
    myservo5.write(0);
  */

  //  delay(300);

  /*  if (BTSerial.available()) {
    String data = BTSerial.readString();
    command(data);
    }
  */
}

void position_5() {
  for (int i = 0; i < 6; i++) {
    sweep(i, 5, delayT);
    delay(delay180);
  }

  /*  sweep(0, 5, delayT);
    delay(delay180);
    sweep(1, 5, delayT);
    delay(delay180);
    sweep(2, 5, delayT);
    delay(delay180);
    sweep(3, 5, delayT);
    delay(delay180);
    sweep(4, 5, delayT);
    delay(delay180);
    sweep(5, 5, delayT);
    delay(delay180);
  */
}

void position_45() {
  for (int i = 0; i < 5; i++) {
    sweep(i, 45, delayT);
    delay(delay180);
  }
  sweep(5, 20, delayT);
  delay(delay180);

  /*
    //  myservo[0].write(90);
    sweep(0, 45, delayT);
    delay(delay180);
    //  now_angle[0] = myservo[0].read();
    //  myservo[1].write(90);
    sweep(1, 45, delayT);
    delay(delay180);
    //  now_angle[1] = myservo[1].read();
    //  myservo[2].write(90);
    sweep(2, 45, delayT);
    delay(delay180);
    //  now_angle[2] = myservo[2].read();
    //  myservo[3].write(90);
    sweep(3, 45, delayT);
    delay(delay180);
    //  now_angle[3] = myservo[3].read();
    //  myservo[4].write(90);
    sweep(4, 45, delayT);
    delay(delay180);
    //  now_angle[4] = myservo[4].read();
    //  myservo[5].write(90);
    sweep(5, 45, delayT);
    delay(delay180);
    //  now_angle[5] = myservo[5].read();
  */
}

void position_90() {
  for (int i = 0; i < 5; i++) {
    sweep(i, 90, delayT);
    delay(delay180);
  }
  sweep(5, 40, delayT);
  delay(delay180);

  /*  sweep(0, 90, delayT);
    delay(delay180);
    sweep(1, 90, delayT);
    delay(delay180);
    sweep(2, 90, delayT);
    delay(delay180);
    sweep(3, 90, delayT);
    delay(delay180);
    sweep(4, 90, delayT);
    delay(delay180);
    sweep(5, 40, delayT);
    delay(delay180);
  */
}

void position_135() {
  for (int i = 0; i < 5; i++) {
    sweep(i, 135, delayT);
    delay(delay180);
  }
  sweep(5, 60, delayT);
  delay(delay180);

  /*  sweep(0, 135, delayT);
    delay(delay180);
    sweep(1, 135, delayT);
    delay(delay180);
    sweep(2, 135, delayT);
    delay(delay180);
    sweep(3, 135, delayT);
    delay(delay180);
    sweep(4, 135, delayT);
    delay(delay180);
    sweep(5, 60, delayT);
    delay(delay180);
  */
}

void position_175() {
  for (int i = 0; i < 5; i++) {
    sweep(0, 175, delayT);
    delay(delay180);
  }
  sweep(5, 80, delayT);
  delay(delay180);

  /*  sweep(0, 175, delayT);
    delay(delay180);
    sweep(1, 175, delayT);
    delay(delay180);
    sweep(2, 175, delayT);
    delay(delay180);
    sweep(3, 175, delayT);
    delay(delay180);
    sweep(4, 175, delayT);
    delay(delay180);
    sweep(5, 80, delayT);
    delay(delay180);
  */
}

void loading() {
  sweep(0, 50, delayT);  // 1번 서보: 90도에서 0도로 이동
  delay(delay180);
  sweep(1, 65, delayT);  // 2번 서보: 90도에서 65도로 이동
  delay(delay180);
  sweep(2, 175, delayT);  // 3번 서보: 90도에서 175도로 이동
  delay(delay180);
  sweep(5, 15, delayT);   // 6번 서보: 90도에서 15도로 이동
  delay(delay180);
  sweep(2, 90, delayT);   // 3번 서보: 175도에서 90도로 복귀
  delay(delay180);
  sweep(1, 90, delayT);   // 2번 서보: 65도에서 90도로 복귀
  delay(delay180);
  sweep(0, 135, delayT);   // 1번 서보: 0도에서 90도로 복귀
  delay(delay180);
  sweep(1, 65, delayT);   // 2번 서보: 다시 65도로 이동
  delay(delay180);
  sweep(2, 170, delayT);  // 3번 서보: 다시 175도로 이동
  delay(delay180);
  sweep(5, 90, delayT);   // 6번 서보: 다시 90도로 복귀
  delay(delay180);
  sweep(2, 90, delayT);  // 3번 서보: 다시 175도로 이동
  delay(delay180);

  //  int ang[] = { 5, 45, 90, 135, 175 };
  //  int ang5[] = { 5, 45, 80, 45, 0 };
  //
  //  for (int i = 0; i < 5; i++) {      // 배열의 각도 개수
  //    for (int j = 0; j < 6; j++) {     // 6축
  //      if (j == 5) {
  //        sweep(5, ang5[i], delayT);
  //        delay(delay180);
  //        continue;
  //      }
  //      sweep(j, ang[i], delayT);
  //      delay(delay180);
  //    }
  //  }
  //  delay(delay180);
  //  //  delay(1000);
  //  position_90();

}


/*
  void Sequins1() {  // servo_Move(int servo_num, int angle, int 1, int delay)
                   //  servo_Move(1, 90);            // 최초 90도 초기화 후 위치 이동
  sweep(4, 155, delayT);
  delay(delay180);
  sweep(1, 35, delayT);
  delay(delay180);
  sweep(2, 135, delayT);
  delay(delay180);
  sweep(3, 15, delayT);
  delay(delay180);
  sweep(4, 10, delayT);
  delay(delay180);
  while (1) {
    grap();  // 물건 잡은 후
    sweep(1, 50, delayT);
      delay(delay180);
  //    break;
    sweep(0, 140, delayT);
      delay(delay180);
  //    break;
    sweep(1, 40, delayT);
      delay(delay180);
  //    break;

    ungrap();
    sweep(1, 50, delayT);
      delay(delay180);
  //    break;
    sweep(0, 90, delayT);
      delay(delay180);
  //    break;
    sweep(1, 40, delayT);
      delay(delay180);
  //    break;
  }
  }

  void Sequins2() {
  //  int angle_motor = servo[0].read();
  //  int pm = 0;

  sweep(5, 70, delayT);
  delay(delay180);
  sweep(1, 18, delayT);
  delay(delay180);
  sweep(4, 113, delayT);
  delay(delay180);
  sweep(3, 15, delayT);
  delay(delay180);
  sweep(2, 148, delayT);
  delay(delay180);
  sweep(5, 23, delayT);
  delay(delay180);

  while (1) {
    grap();
    sweep(1, 28, delayT);
      delay(delay180);
  //    break;
    sweep(0, 140, delayT);
      delay(delay180);
  //    break;
    sweep(1, 18, delayT);
      delay(delay180);
  //    break;

    ungrap();
    sweep(1, 28, delayT);
      delay(delay180);
  //    break;
    sweep(0, 90, delayT);
      delay(delay180);
  //    break;
    sweep(1, 18, delayT);
      delay(delay180);
  //    break;
  }
  }

  void grap() {
  sweep(5, 15, delayT);
  }

  void ungrap() {
  sweep(5, 75, delayT);
  }
*/

/*
  bool servo_Move(int servo_num, int angle, int speed, int delay) {
  int run = 1;
  int A_Servo_Value = 0;
  int B_Servo_Value = 0;
  servo_num -= 1;  // 1번 서보모터 == servo[0]이었으나, 위 코드를 통해 직관적으로 변경 함.

  int now_angle = servo[servo_num].read();
  start_time = millis();

  while (run) {
    end_time = millis();

    if (end_time - start_time >= delay) {
      start_time = millis();

      if (now_angle > angle)  // 같은 각도인지 확인
      {                       // 서보 모터 speed에서 받아 온 값만큼 빼거나 더하기
                              // 이 함수는 서보모터를 보다 부드럽고 속도제어와 비동기식으로
                              // 작동 중에도 빠져나올 수 있게 만든 함수
        servo[servo_num].write(now_angle - speed);
        now_angle -= speed;
        A_Servo_Value = B_Servo_Value;
        B_Servo_Value = servo[servo_num].read();

        if (A_Servo_Value - B_Servo_Value == 0) {
          servo[servo_num].write(servo[servo_num].read());
          break;
        }
        if (now_angle - speed <= angle) {
          servo[servo_num].write(angle);
          //          BTSerial.print(servo[servo_num].read() + (servo_num + 1) * 1000);
          Serial.println((int)servo[servo_num].read() + (servo_num + 1) * 1000);
          break;
        }
      } else if (now_angle < angle) {
        servo[servo_num].write(now_angle + speed);
        now_angle += speed;
        A_Servo_Value = B_Servo_Value;
        B_Servo_Value = servo[servo_num].read();

        if (A_Servo_Value - B_Servo_Value == 0) {
          servo[servo_num].write(servo[servo_num].read());
          break;
        }

        if (now_angle + speed >= angle) {
          servo[servo_num].write(angle);
          //          BTSerial.print(servo[servo_num].read() + (servo_num + 1) * 1000);
          Serial.println((int)servo[servo_num].read() + (servo_num + 1) * 1000);
          break;
        }
      } else {
        break;
      }
    } else {
      /*      if (BTSerial.available()) {
        String data = BTSerial.readString();
        command(data);
        return true;
      }

    }
  }
  return false;
  }
*/
